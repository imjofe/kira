// Mocks generated by Mockito 5.4.6 from annotations
// in kira_flutter_client/test/goals_detail/goal_detail_loading.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i6;

import 'package:kira_flutter_client/models/goal_detail.dart' as _i5;
import 'package:kira_flutter_client/models/goal_model.dart' as _i3;
import 'package:kira_flutter_client/providers/goals_provider.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAsyncValue_0<T> extends _i1.SmartFake implements _i2.AsyncValue<T> {
  _FakeAsyncValue_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GoalsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoalsProvider extends _i1.Mock implements _i2.GoalsProvider {
  MockGoalsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i2.AsyncValue<List<_i3.GoalModel>> watchAllGoals() =>
      (super.noSuchMethod(
            Invocation.method(#watchAllGoals, []),
            returnValue: _FakeAsyncValue_0<List<_i3.GoalModel>>(
              this,
              Invocation.method(#watchAllGoals, []),
            ),
          )
          as _i2.AsyncValue<List<_i3.GoalModel>>);

  @override
  void initWithSeed(List<_i3.GoalModel>? goals) => super.noSuchMethod(
    Invocation.method(#initWithSeed, [goals]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> loadGoals() =>
      (super.noSuchMethod(
            Invocation.method(#loadGoals, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  double progressFor(_i3.GoalModel? goal) =>
      (super.noSuchMethod(
            Invocation.method(#progressFor, [goal]),
            returnValue: 0.0,
          )
          as double);

  @override
  _i2.AsyncValue<_i5.GoalDetail> watchGoal(int? goalId) =>
      (super.noSuchMethod(
            Invocation.method(#watchGoal, [goalId]),
            returnValue: _FakeAsyncValue_0<_i5.GoalDetail>(
              this,
              Invocation.method(#watchGoal, [goalId]),
            ),
          )
          as _i2.AsyncValue<_i5.GoalDetail>);

  @override
  _i4.Future<void> toggleRequirement(int? requirementId, bool? newValue) =>
      (super.noSuchMethod(
            Invocation.method(#toggleRequirement, [requirementId, newValue]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void simulateError() => super.noSuchMethod(
    Invocation.method(#simulateError, []),
    returnValueForMissingStub: null,
  );

  @override
  void simulateGoalError(int? goalId) => super.noSuchMethod(
    Invocation.method(#simulateGoalError, [goalId]),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
